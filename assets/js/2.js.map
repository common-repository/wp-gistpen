{"version":3,"sources":["webpack:///./client/prism/plugins/show-invisibles.ts","webpack:///./node_modules/prismjs/plugins/show-invisibles/prism-show-invisibles.css","webpack:///./node_modules/prismjs/plugins/show-invisibles/prism-show-invisibles.css?2bd8","webpack:///./node_modules/prismjs/plugins/show-invisibles/prism-show-invisibles.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA,2BAA2B,mBAAO,CAAC,8FAAyC;AAC5E;AACA,cAAc,QAAS,kEAAkE,uBAAuB,EAAE,+FAA+F,mBAAmB,iBAAiB,uBAAuB,EAAE,mCAAmC,sBAAsB,EAAE,sBAAsB,sBAAsB,EAAE,wBAAwB,4BAA4B,EAAE,sBAAsB,sBAAsB,EAAE,yBAAyB,sBAAsB,EAAE;;;;;;;;;;;;ACF5gB;AACA;AACA,cAAc,mBAAO,CAAC,4PAAgG;AACtH,eAAe;AACf;;AAEA,4CAA4C,QAAS;AACrD;;AAEA;AACA;AACA,YAAY,mBAAO,CAAC,4FAAyC;AAC7D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY,aAAa;AACzB,YAAY,cAAc;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;;AAEA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF,CAAC","file":"2.js","sourcesContent":["import 'prismjs/plugins/show-invisibles/prism-show-invisibles';\nexport {\n  default as plugin\n} from 'prismjs/plugins/show-invisibles/prism-show-invisibles.css';\n","exports = module.exports = require(\"../../../css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".token.tab:not(:empty),\\n.token.cr,\\n.token.lf,\\n.token.space {\\n  position: relative; }\\n\\n.token.tab:not(:empty):before,\\n.token.cr:before,\\n.token.lf:before,\\n.token.space:before {\\n  color: #808080;\\n  opacity: 0.6;\\n  position: absolute; }\\n\\n.token.tab:not(:empty):before {\\n  content: '\\\\21E5'; }\\n\\n.token.cr:before {\\n  content: '\\\\240D'; }\\n\\n.token.crlf:before {\\n  content: '\\\\240D\\\\240A'; }\\n\\n.token.lf:before {\\n  content: '\\\\240A'; }\\n\\n.token.space:before {\\n  content: '\\\\00B7'; }\\n\", \"\"]);\n","var refs = 0;\nvar dispose;\nvar content = require(\"!!../../../css-loader/dist/cjs.js!../../../sass-loader/dist/cjs.js!./prism-show-invisibles.css\");\nvar options = {\"hmr\":false};\noptions.insertInto = undefined;\n\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) exports.locals = content.locals;\n\nexports.use = exports.ref = function() {\n\tif(!(refs++)) {\n\t\tdispose = require(\"!../../../style-loader/lib/addStyles.js\")(content, options);\n\t}\n\n\treturn exports;\n};\n\nexports.unuse = exports.unref = function() {\n  if(refs > 0 && !(--refs)) {\n\t   dispose();\n\t\t dispose = null;\n  }\n};\n","(function () {\n\n\tif (\n\t\ttypeof self !== 'undefined' && !self.Prism ||\n\t\ttypeof global !== 'undefined' && !global.Prism\n\t) {\n\t\treturn;\n\t}\n\n\n\tvar invisibles = {\n\t\t'tab': /\\t/,\n\t\t'crlf': /\\r\\n/,\n\t\t'lf': /\\n/,\n\t\t'cr': /\\r/,\n\t\t'space': / /\n\t};\n\n\n\t/**\n\t * Handles the recursive calling of `addInvisibles` for one token.\n\t *\n\t * @param {Object|Array} tokens The grammar or array which contains the token.\n\t * @param {string|number} name The name or index of the token in `tokens`.\n\t */\n\tfunction handleToken(tokens, name) {\n\t\tvar value = tokens[name];\n\n\t\tvar type = Prism.util.type(value);\n\t\tswitch (type) {\n\t\t\tcase 'RegExp':\n\t\t\t\tvar inside = {};\n\t\t\t\ttokens[name] = {\n\t\t\t\t\tpattern: value,\n\t\t\t\t\tinside: inside\n\t\t\t\t};\n\t\t\t\taddInvisibles(inside);\n\t\t\t\tbreak;\n\n\t\t\tcase 'Array':\n\t\t\t\tfor (var i = 0, l = value.length; i < l; i++) {\n\t\t\t\t\thandleToken(value, i);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault: // 'Object'\n\t\t\t\tvar inside = value.inside || (value.inside = {});\n\t\t\t\taddInvisibles(inside);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Recursively adds patterns to match invisible characters to the given grammar (if not added already).\n\t *\n\t * @param {Object} grammar\n\t */\n\tfunction addInvisibles(grammar) {\n\t\tif (!grammar || grammar['tab']) {\n\t\t\treturn;\n\t\t}\n\n\t\t// assign invisibles here to \"mark\" the grammar in case of self references\n\t\tfor (var name in invisibles) {\n\t\t\tif (invisibles.hasOwnProperty(name)) {\n\t\t\t\tgrammar[name] = invisibles[name];\n\t\t\t}\n\t\t}\n\n\t\tfor (var name in grammar) {\n\t\t\tif (grammar.hasOwnProperty(name) && !invisibles[name]) {\n\t\t\t\tif (name === 'rest') {\n\t\t\t\t\taddInvisibles(grammar['rest']);\n\t\t\t\t} else {\n\t\t\t\t\thandleToken(grammar, name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tPrism.hooks.add('before-highlight', function (env) {\n\t\taddInvisibles(env.grammar);\n\t});\n})();\n"],"sourceRoot":""}